@model ValidationTestViewModel
@{
    ViewBag.Title = "入力検証テスト";
}
<h2>@ViewBag.Title.</h2>
@{ 
    var ajaxOptions = new AjaxOptions
    {
        HttpMethod = "POST",
        OnSuccess = "onSuccess",
        OnFailure = "onFailure"
    };
}
@using (Ajax.BeginForm("Save", "ValidationTest", ajaxOptions, new { @class = "form-horizontal" }))
{
    @Html.AntiForgeryToken()
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(m => m.RequiredItem, new { @class = "col-xs-2 control-label" })
        <div class="col-xs-10">
            @Html.TextBoxFor(m => m.RequiredItem, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.RequiredItem, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        <div class="col-xs-offset-2 col-xs-10">
            <button class="btn btn-default"><span class="glyphicon glyphicon-saved"> 登録</span></button>
        </div>
    </div>
}
@section scripts {
<script>
    function onSuccess(data) {
        if (data.Result) {
            alert('Success!!');
        } else {
            PROTOTYPE.common.displayValidationErrors(data.Errors);
            //var modelStateErrors = data.Errors;
            //for (var i = 0; i < modelStateErrors.length; i++) {
            //    var errorModel = modelStateErrors[i];
            //    var errorMsg = '';
            //    for (var j = 0; j < errorModel.errors.length; j++) {
            //        errorMsg += escapeHtml(errorModel.errors[j]) + '<br />';
            //    }
            //    $('span[data-valmsg-for="' + errorModel.key + '"]').html(errorMsg);
            //}
        }
    }
    function onFailure(data) {
        alert('Failure!!');
    }
</script>
}