@model ValidationTestViewModel
@{
    ViewBag.Title = "入力検証テスト";
}
<div class="row">
    <h2>@ViewBag.Title.</h2>
    @{ 
        var ajaxOptions = new AjaxOptions
        {
            HttpMethod = "POST",
            OnSuccess = "onSuccess",
            OnFailure = "onFailure"
        };
    }
    @using (Ajax.BeginForm("Save", "ValidationTest", ajaxOptions, new { @class = "form-horizontal" }))
    {
        @Html.AntiForgeryToken()
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(m => m.Id, new { @class = "col-xs-2 control-label" })
            <div class="col-xs-10">
                @Html.TextBoxFor(m => m.Id, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Id, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-xs-offset-2 col-xs-10">
                <button class="btn btn-default"><span class="glyphicon glyphicon-saved"> 登録</span></button>
            </div>
        </div>
    }
</div>
@section scripts {
<script>
    //common.js
    //var str = '& < > ` " ' + "'";
    var escapeHtml = (function (String) {
        var escapeMap = {
            '&': '&amp;',
            "'": '&#x27;',
            '`': '&#x60;',
            '"': '&quot;',
            '<': '&lt;',
            '>': '&gt;'
        };
        var escapeReg = '[';
        var reg;
        for (var p in escapeMap) {
            if (escapeMap.hasOwnProperty(p)) {
                escapeReg += p;
            }
        }
        escapeReg += ']';
        reg = new RegExp(escapeReg, 'g');

        return function escapeHtml(str) {
            str = (str === null || str === undefined) ? '' : '' + str;
            return str.replace(reg, function (match) {
                return escapeMap[match];
            });
        };
    }(String));
    function onSuccess(data) {
        console.log(data);
        if (data.Result) {
            alert('Success!!');
        } else {
            // displayValidationErrors(data.Errors)
            var modelStateErrors = data.Errors;
            for (var i = 0; i < modelStateErrors.length; i++) {
                var errorModel = modelStateErrors[i];
                var errorMsg = '';
                for (var j = 0; j < errorModel.errors.length; j++) {
                    errorMsg += escapeHtml(errorModel.errors[j]) + '<br />';
                }
                $('span[data-valmsg-for="' + errorModel.key + '"]').html(errorMsg);
            }
        }
    }
    function onFailure(data) {
        alert('Failure!!');
    }
</script>
}